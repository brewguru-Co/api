#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require('http');
const app = require('../app');
const models = require('../models');
const logger = require('../helpers/logger');
const mongooseLoader = require('../helpers/mongoose');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${port}` : `port ${port}`;
  logger.info(`Listening on ${bind}`);
}

/**
 * Mysql and MongoDB Sync
 * Listen on provided port, on all network interfaces.
 */

async function start() {
  // sync() will create all table if they doesn't exist in database
  await models.sequelize.sync();
  logger.info('mysql connected');
  await mongooseLoader();
  logger.info('mongoDB connected');

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

start();
